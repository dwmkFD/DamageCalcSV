
    <main>
            <MudGrid Spacing="@spacing" Justify="Justify.Center">
                <MudItem xs="12"><MudText>@Title</MudText></MudItem>
                    <MudItem xs="6">
                        <MudAutocomplete T="string" Label="ポケモン" SearchFunc="@search_pokemon" CoerceText="false" Variant="Variant.Outlined" Margin="Margin.Dense" ValueChanged="OnPokemonNameSelected" />
                    </MudItem>
                    <MudItem xs="4">
                    <MudSelect T="string" Label="性格" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Margin="Margin.Dense" ValueChanged="OnNatureSelected">
                        @foreach( var n in nature )
                        {
                            <MudSelectItem T="string" Value="@n" />
                        }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="2">
                        <MudNumericField T="int" Label="レベル" Variant="Variant.Outlined" Min="1" Max="100" Margin="Margin.Dense" Value="@Level" ValueChanged="OnLevelChanged" />
                    </MudItem>

                    <MudItem xs="2">
                        <MudText>実数値：</MudText>
                    </MudItem>
                    <MudItem xs="10">
                    <MudItem xs="12">
                        <MudGrid Spacing="0">
                            <MudItem xs="2">
                                <MudNumericField @bind-Value="status[0]" Label="ＨＰ" Variant="Variant.Outlined" Margin="Margin.Dense" />
                            </MudItem>
                            <MudItem sm="2">
                                <MudNumericField @bind-Value="status[1]" Label="攻撃" Variant="Variant.Outlined" Margin="Margin.Dense" />
                            </MudItem>
                            <MudItem xs="2">
                                <MudNumericField @bind-Value="status[2]" Label="防御" Variant="Variant.Outlined" Margin="Margin.Dense" />
                            </MudItem>
                            <MudItem xs="2">
                                <MudNumericField @bind-Value="status[3]" Label="特攻" Variant="Variant.Outlined" Margin="Margin.Dense" />
                            </MudItem>
                            <MudItem xs="2">
                                <MudNumericField @bind-Value="status[4]" Label="特防" Variant="Variant.Outlined" Margin="Margin.Dense" />
                            </MudItem>
                            <MudItem xs="2">
                                <MudNumericField @bind-Value="status[5]" Label="素早さ" Variant="Variant.Outlined" Margin="Margin.Dense" />
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                </MudItem>

                <MudItem xs="2">
                    <MudText>個体値：</MudText>
                </MudItem>
                <MudItem xs="10">
                    <MudItem xs="12">
                        <MudGrid Spacing="0">
                        <MudItem xs="2">
                        <MudNumericField T="int" Value="@status[6]" Variant="Variant.Outlined" Min="0" Max="31" Margin="Margin.Dense" ValueChanged="@(s => OnStatusChanged(6, s))" />
                        </MudItem>
                        <MudItem sm="2">
                        <MudNumericField T="int" Value="@status[7]" Variant="Variant.Outlined" Min="0" Max="31" Margin="Margin.Dense" ValueChanged="@(s => OnStatusChanged(7, s))" />
                        </MudItem>
                        <MudItem xs="2">
                        <MudNumericField T="int" Value="@status[8]" Variant="Variant.Outlined" Min="0" Max="31" Margin="Margin.Dense" ValueChanged="@(s => OnStatusChanged(8, s))" />
                        </MudItem>
                        <MudItem xs="2">
                        <MudNumericField T="int" Value="@status[9]" Variant="Variant.Outlined" Min="0" Max="31" Margin="Margin.Dense" ValueChanged="@(s => OnStatusChanged(9, s))" />
                        </MudItem>
                        <MudItem xs="2">
                        <MudNumericField T="int" Value="@status[10]" Variant="Variant.Outlined" Min="0" Max="31" Margin="Margin.Dense" ValueChanged="@(s => OnStatusChanged(10, s))" />
                        </MudItem>
                        <MudItem xs="2">
                        <MudNumericField T="int" Value="@status[11]" Variant="Variant.Outlined" Min="0" Max="31" Margin="Margin.Dense" ValueChanged="@(s => OnStatusChanged(11, s))" />
                        </MudItem>
                    </MudGrid>
                </MudItem>
                </MudItem>


                <MudItem xs="2">
                    <MudText>努力値：</MudText>
                </MudItem>
                <MudItem xs="10">
                    <MudItem xs="12">
                        <MudGrid Spacing="0">
                        <MudItem xs="2">
                        <MudNumericField T="int" Value="@status[12]" Variant="Variant.Outlined" Min="0" Max="252" Step="4" Margin="Margin.Dense" ValueChanged="@(s => OnStatusChanged(12, s))" />
                        </MudItem>
                        <MudItem sm="2">
                        <MudNumericField T="int" Value="@status[13]" Variant="Variant.Outlined" Min="0" Max="252" Step="4" Margin="Margin.Dense" ValueChanged="@(s => OnStatusChanged(13, s))" />
                        </MudItem>
                        <MudItem xs="2">
                        <MudNumericField T="int" Value="@status[14]" Variant="Variant.Outlined" Min="0" Max="252" Step="4" Margin="Margin.Dense" ValueChanged="@(s => OnStatusChanged(14, s))" />
                        </MudItem>
                        <MudItem xs="2">
                        <MudNumericField T="int" Value="@status[15]" Variant="Variant.Outlined" Min="0" Max="252" Step="4" Margin="Margin.Dense" ValueChanged="@(s => OnStatusChanged(15, s))" />
                        </MudItem>
                        <MudItem xs="2">
                        <MudNumericField T="int" Value="@status[16]" Variant="Variant.Outlined" Min="0" Max="252" Step="4" Margin="Margin.Dense" ValueChanged="@(s => OnStatusChanged(16, s))" />
                        </MudItem>
                        <MudItem xs="2">
                        <MudNumericField T="int" Value="@status[17]" Variant="Variant.Outlined" Min="0" Max="252" Step="4" Margin="Margin.Dense" ValueChanged="@(s => OnStatusChanged(17, s))" />
                        </MudItem>
                    </MudGrid>
                </MudItem>
                </MudItem>
                <MudItem xs="2">
                </MudItem>
                <MudItem xs="10">
                    <MudItem xs="12">
                        <MudGrid Spacing="0">
                        <MudItem xs="2">
                            <MudButton OnClick="@(s => _efvalToggleText(0))" Variant="Variant.Filled" FullWidth="true">@_efvalToggleValue[0]</MudButton>
                        </MudItem>
                        <MudItem sm="2">
                                <MudButton OnClick="@(s => _efvalToggleText(1))" Variant="Variant.Filled" FullWidth="true">@_efvalToggleValue[1]</MudButton>
                        </MudItem>
                        <MudItem xs="2">
                                <MudButton OnClick="@(s => _efvalToggleText(2))" Variant="Variant.Filled" FullWidth="true">@_efvalToggleValue[2]</MudButton>
                        </MudItem>
                        <MudItem xs="2">
                                <MudButton OnClick="@(s => _efvalToggleText(3))" Variant="Variant.Filled" FullWidth="true">@_efvalToggleValue[3]</MudButton>
                        </MudItem>
                        <MudItem xs="2">
                                <MudButton OnClick="@(s => _efvalToggleText(4))" Variant="Variant.Filled" FullWidth="true">@_efvalToggleValue[4]</MudButton>
                        </MudItem>
                        <MudItem xs="2">
                                <MudButton OnClick="@(s => _efvalToggleText(5))" Variant="Variant.Filled" FullWidth="true">@_efvalToggleValue[5]</MudButton>
                        </MudItem>
                        </MudGrid>
                    </MudItem>
            </MudItem>

                <MudItem xs="2">
                    <MudText>ランク：</MudText>
                </MudItem>
                <MudItem xs="10">
                    <MudItem xs="12">
                        <MudGrid Spacing="0">
                        <MudItem xs="2" />
                        <MudItem xs="2">
                        <MudNumericField T="int" Value="@rank[0]" Variant="Variant.Outlined" Min="-6" Max="6" Margin="Margin.Dense" ValueChanged="@(s => OnRankChanged( 0, s ))" />
                        </MudItem>
                        <MudItem sm="2">
                        <MudNumericField T="int" Value="@rank[1]" Variant="Variant.Outlined" Min="-6" Max="6" Margin="Margin.Dense" ValueChanged="@(s => OnRankChanged( 1, s ))" />
                        </MudItem>
                        <MudItem xs="2">
                        <MudNumericField T="int" Value="@rank[2]" Variant="Variant.Outlined" Min="-6" Max="6" Margin="Margin.Dense" ValueChanged="@(s => OnRankChanged( 2, s ))" />
                        </MudItem>
                        <MudItem xs="2">
                        <MudNumericField T="int" Value="@rank[3]" Variant="Variant.Outlined" Min="-6" Max="6" Margin="Margin.Dense" ValueChanged="@(s => OnRankChanged( 3, s ))" />
                        </MudItem>
                        <MudItem xs="2">
                        <MudNumericField T="int" Value="@rank[4]" Variant="Variant.Outlined" Min="-6" Max="6" Margin="Margin.Dense" ValueChanged="@(s => OnRankChanged( 4, s ))" />
                            </MudItem>
                        </MudGrid>
                </MudItem>
                </MudItem>

                <MudItem xs="4">
                    <MudSelect T="string" Label="特性" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Margin="Margin.Dense" ValueChanged="OnAbilitySelected">
                        <MudSelectItem Value="@("未発動")" />
                        @foreach( var a in PokemonAbility )
                        {
                            <MudSelectItem T="string" Value="@a" />
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="5">
            <MudSelect T="string" Label="道具" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Margin="Margin.Dense" ValueChanged="OnItemSelected">
                @foreach( var i in PokemonItem )
                {
                    <MudSelectItem T="string" Value="@i" />
                }
                    </MudSelect>
                </MudItem>
                <MudItem xs="3">
            <MudSelect T="string" Label="テラスタイプ" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Margin="Margin.Dense" ValueChanged="OnTeraTypeSelected">
                @foreach( var t in teratype )
                {
                    <MudSelectItem T="string" Value="@t" />
                }
                    </MudSelect>
                </MudItem>

            <MudItem xs="4">
                @if (ability_value == "マルチスケイル" || ability_value == "ファントムガード")
                {
                    <MudForm>
                        <MudCheckBox T="bool" Checked="@options[12]" Size="Size.Small" Label="HPが満タンの時ダメージ半減" Margin="Margin.Dense" CheckedChanged="@(x => OnOptionsChanged(12,x))"/>
                    </MudForm>
                }
            </MudItem>
            <MudItem xs="5">
                @if (item_value == "しんかのきせき")
                {
                    <MudForm>
                        <MudCheckBox  T="bool" Checked="@options[13]" Size="Size.Small" Label="進化前ポケモンの時 防御/特防1.5倍" Margin="Margin.Dense" CheckedChanged="@(x => OnOptionsChanged(13,x))" />
                    </MudForm>
                }
            </MudItem>
            <MudItem xs="3">
                @if (teratype_value != "")
                {
                    <MudForm>
                        <MudCheckBox  T="bool" Checked="@options[14]" Size="Size.Small" Label="テラスタル" Margin="Margin.Dense" CheckedChanged="@(x => OnOptionsChanged(14,x))" />
                    </MudForm>
                }
            </MudItem>


                <MudItem xs="4">
                    <MudForm>
                        <MudCheckBox  T="bool" Checked="@options[0]" Size="Size.Small" Label="リフレクター" CheckedChanged="@(x => OnOptionsChanged(0,x))" />
                    </MudForm>
                </MudItem>
                <MudItem xs="4">
                    <MudForm>
                        <MudCheckBox  T="bool" Checked="@options[1]" Size="Size.Small" Label="ひかりのかべ" CheckedChanged="@(x => OnOptionsChanged(1,x))" />
                    </MudForm>
                </MudItem>
                <MudItem xs="4">
                    <MudForm>
                        <MudCheckBox  T="bool" Checked="@options[2]" Size="Size.Small" Label="てだすけ" CheckedChanged="@(x => OnOptionsChanged(2,x))" />
                    </MudForm>
                </MudItem>
                <MudItem xs="4">
                    <MudForm>
                        <MudCheckBox  T="bool" Checked="@options[3]" Size="Size.Small" Label="きあいだめ" CheckedChanged="@(x => OnOptionsChanged(3,x))" />
                    </MudForm>
                </MudItem>
                <MudItem xs="4">
                    <MudForm>
                        <MudCheckBox  T="bool" Checked="@options[4]" Size="Size.Small" Label="じゅうでん" CheckedChanged="@(x => OnOptionsChanged(4,x))" />
                    </MudForm>
                </MudItem>
                <MudItem xs="4">
                    <MudForm>
                        <MudCheckBox  T="bool" Checked="@options[5]" Size="Size.Small" Label="そうでん" CheckedChanged="@(x => OnOptionsChanged(5,x))" />
                    </MudForm>
                </MudItem>
                <MudItem xs="4">
                    <MudForm>
                        <MudCheckBox  T="bool" Checked="@options[6]" Size="Size.Small" Label="はがねのせいしん" CheckedChanged="@(x => OnOptionsChanged(6,x))" />
                    </MudForm>
                </MudItem>
                <MudItem xs="4">
                    <MudForm>
                        <MudCheckBox  T="bool" Checked="@options[7]" Size="Size.Small" Label="フラワーギフト" CheckedChanged="@(x => OnOptionsChanged(7,x))" />
                    </MudForm>
                </MudItem>
                <MudItem xs="4">
                    <MudForm>
                        <MudCheckBox  T="bool" Checked="@options[8]" Size="Size.Small" Label="ハロウィン" CheckedChanged="@(x => OnOptionsChanged(8,x))" />
                    </MudForm>
                </MudItem>
                <MudItem xs="4">
                    <MudForm>
                        <MudCheckBox  T="bool" Checked="@options[9]" Size="Size.Small" Label="もりののろい" CheckedChanged="@(x => OnOptionsChanged(9,x))" />
                    </MudForm>
                </MudItem>
                <MudItem xs="4">
                    <MudForm>
                        <MudCheckBox  T="bool" Checked="@options[10]" Size="Size.Small" Label="みずびたし" CheckedChanged="@(x => OnOptionsChanged(10,x))" />
                    </MudForm>
                </MudItem>
                <MudItem xs="4">
                    <MudForm>
                        <MudCheckBox  T="bool" Checked="@options[11]" Size="Size.Small" Label="フレンドガード" CheckedChanged="@(x => OnOptionsChanged(11,x))" />
                    </MudForm>
                </MudItem>
        <MudItem xs="4">
            <MudForm>
                <MudCheckBox  T="bool" Checked="@options[19]" Size="Size.Small" Label="ちいさくなる" CheckedChanged="@(x => OnOptionsChanged(19,x))" />
            </MudForm>
        </MudItem>

        <MudItem xs="4">
            <MudSelect T="string" Label="状態異常" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Margin="Margin.Dense" ValueChanged="OnConditionChanged">
                @foreach( var c in conditionAbnormaly )
                {
                    <MudSelectItem T="string" Value="@c" />
                }
            </MudSelect>
        </MudItem>

        <MudItem xs="4">
            <MudSelect T="int" Label="@special_string" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Margin="Margin.Dense" ValueChanged="OnSpecialValueChanged">
                @foreach (var v in special_values)
                {
                    <MudSelectItem T="int" Value="@v" />
                }
            </MudSelect>
        </MudItem> 

    </MudGrid>
    </main>

@code {
    public int spacing { get; set; } = 1;

    private string PokemonName;
    private List<string> PokemonNameList = new List<string>();

    private List<string> trans_katakana( string str )
    {
        List<string> result = new List<string>();
        if ( str == "f" )
        {
            result.Add("ファ");
            result.Add("フィ");
            result.Add("フ");
            result.Add("フェ");
            result.Add("フォ");
        }
        result.Add(str);
        return (result);
    }

    private async Task<IEnumerable<string>> search_pokemon( string str )
    {
        if (string.IsNullOrEmpty(str))
            return (PokemonNameList);

        var s = trans_katakana(str);
        var ll = PokemonNameList.Where(x => s.Contains(x)).ToList();
        Title = "";
        foreach ( var l in ll )
        {
            Title += l;
        }
        return (PokemonNameList.Where(x => s.Contains(x)));
    }
    private void OnPokemonNameSelected( string name ) // ポケモン名が入力された
    {
        PokemonName = name;
        if ( name == "コノヨザル" || name == "オコリザル" )
        {
            special_string = "ふんどのこぶし";
        }
        else if ( name == "ハカドッグ" || name.Contains( "イダイトウ" ) )
        {
            special_string = "おはかまいり";
        }
        CalcStatus();
    }
    private void OnNatureSelected( string v )
    {
        nature_value = v;
        CalcStatus();
    }
    private void OnLevelChanged( int l )
    {
        Level = l;
        CalcStatus();
    }
    private void OnStatusChanged( int idx, int v )
    {
        status[idx] = v;
        CalcStatus();
    }
    private void OnRankChanged( int idx, int v )
    {
        rank[idx] = v;
        CalcStatus();
    }
    private void OnAbilitySelected( string s )
    {
        if (s == "そうだいしょう" || s == "はがねのせいしん")
        {
            special_string = s;
        }
        ability_value = s;
        CalcStatus();
    }
    private void OnItemSelected( string s )
    {
        item_value = s;
        CalcStatus();
    }
    private void OnTeraTypeSelected( string s )
    {
        teratype_value = s;
        if ( options[14] )
            CalcStatus(); // テラスタルしてる時だけダメージ再計算
    }
    private void OnConditionChanged( string s )
    {
        options[15] = options[16] = options[17] = options[18] = false;
        switch ( s )
        {
            default: break;
            case "毒・猛毒": options[15] = true; break;
            case "火傷": options[16] = true; break;
            case "麻痺": options[17] = true; break;
            case "眠り": options[18] = true; break;
        }

        CalcStatus();
    }
    private void OnOptionsChanged( int idx, bool val )
    {
        options[idx] = val;
        CalcStatus();
    }
    private void OnSpecialValueChanged( int val )
    {
        special_value = val;
        CalcStatus();
    }

    private void CalcStatus()
    {
        // レベル、種族値、個体値、努力値から実数値を計算する
        var p = PokemonManager.GetPokemonData(PokemonName);
        if (p == null) // そんな名前のポケモンは存在しない！
            return;

        // 特性を設定する
        PokemonAbility.Clear();
        foreach( var a in p.ability )
        {
            if ( string.IsNullOrEmpty( a ) == false )
                PokemonAbility.Add( a );
        }

        // 種族値を入力
        status[0] = p.HP;
        status[1] = p.Attack;
        status[2] = p.Block;
        status[3] = p.Constant;
        status[4] = p.Deffence;
        status[5] = p.Speed;

        // HPを計算する
        status[0] = ( status[0] * 2 + status[6] + status[12] / 4 ) * Level / 100 + Level + 10;
        // それ以外のステータスを計算する
        for ( int i = 1; i < 6; ++i )
        {
            status[i] = ( status[i] * 2 + status[6 + i] + status[12 + i] / 4 ) * Level / 100 + 5;
        }

        // 性格補正する
        int idx = Array.IndexOf(nature, nature_value);
        if ( idx > 0 )
        {
            --idx;
            int up_status = idx / 4;
            int down_status = idx % 4;
            if (down_status >= up_status)
                down_status += 1;
            status[1 + up_status] = (int)( status[1 + up_status] * 1.1 );
            status[1 + down_status] = (int)(status[1 + down_status] * 0.9);
        }

        // 実ステータスを入力して親コンポーネントに返す
        DamageCalcSV.Shared.Models.PokemonDataReal real_pokemon
        = new DamageCalcSV.Shared.Models.PokemonDataReal(p.Name, p.type[0], p.type[1], teratype_value, Level, status[0], status[1], status[2], status[3], status[4], status[5],
                                                          p.ZukanNo, p.Height, p.Weight, ability_value, item_value, rank, options, special_value, p.MoveList);

        OnStatusChangeEventCallback.InvokeAsync( real_pokemon );
    }

    private int Level = 50;

    private List<string> PokemonAbility = new List<string>();
    private string ability_value = "未発動";

    private string item_value = "未発動";

    private string teratype_value = "";

    private string[] nature = {
        "がんばりや",
        "さみしがり A+B-", "いじっぱり A+C-", "やんちゃ A+D-", "ゆうかん A+S-",
        "ずぶとい B+A-", "わんぱく B+C-", "のうてんき B+D-", "のんき B+S-",
        "ひかえめ C+A-", "おっとり C+B-", "うっかりや C+D-", "れいせい C+S-",
        "おだやか D+A-", "おとなしい D+B-", "しんちょう D+C-", "なまいき D+S-",
        "おくびょう S+A-", "せっかち S+B-", "ようき S+C-", "むじゃき S+D-",
    };
    private string nature_value = "がんばりや";

    private string[] PokemonItem = {
        "もちものなし", "(攻撃系)", "タイプ強化", "ノーマルジュエル",
        "いのちのたま", "こころのしずく", "こだわりハチマキ", "こだわりメガネ",
        "こんごうだま", "しらたま", "しんかいのキバ", "するどいツメ", "たつじんのおび",
        "ちからのハチマキ", "でんきだま", "ながねぎ", "はっきんだま", "ピントレンズ",
        "ふといホネ", "メトロノーム(1回目)", "メトロノーム(2回目)", "メトロノーム(3回目)",
        "メトロノーム(4回目)", "メトロノーム(5回目)", "メトロノーム(6回目以降)","ものしりメガネ",
        "ラッキーパンチ", "(防御系)", "半減木の実", "くろいてっきゅう", "しんかいのウロコ",
        "しんかのきせき", "とつげきチョッキ", "メタルパウダー",
    };

    private string[] teratype = {
        "ノーマル", "ほのお", "みず", "でんき", "くさ",
        "こおり", "かくとう", "どく", "じめん", "ひこう",
        "エスパー", "むし", "いわ", "ゴースト",
        "ドラゴン", "あく", "はがね", "フェアリー",
    };

    private string[] conditionAbnormaly = {
        "正常", "毒・猛毒", "火傷", "麻痺", "眠り",
    };

    private DamageCalcSV.Shared.Models.PokemonDataManager PokemonManager = new DamageCalcSV.Shared.Models.PokemonDataManager();

    private int[] status = new int[18];
    private int[] rank = { 0, 0, 0, 0, 0 };

    private int[] special_values = {
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
    };
    private string special_string;
    private int special_value = 0;

    private int[] _efvalToggleValue = new int[6];
    void _efvalToggleText( int idx )
    {
        if (_efvalToggleValue[idx] == 252)
        {
            _efvalToggleValue[idx] = 0;
            status[12 + idx] = 252;
        }
        else
        {
            _efvalToggleValue[idx] = 252;
            status[12 + idx] = 0;
        }

        CalcStatus();
    }

    private bool[] options = new bool[30];

    [Parameter] public string Title { get; set; }
    [Parameter]
    public EventCallback<DamageCalcSV.Shared.Models.PokemonDataReal> OnStatusChangeEventCallback { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        // 一気に登録するとエラーが起きるので、世代ごとに分割
        PokemonManager.InitializePokemonData1();
        PokemonManager.InitializePokemonData2();
        PokemonManager.InitializePokemonData3();
        PokemonManager.InitializePokemonData4();
        PokemonManager.InitializePokemonData5();
        PokemonManager.InitializePokemonData6();
        PokemonManager.InitializePokemonData7();
        PokemonManager.InitializePokemonData8();
        PokemonManager.InitializePokemonData9();
        PokemonNameList = PokemonManager.AllPokemonName();

        status[6] = status[7] = status[8] = status[9] = status[10] = status[11] = 31;
        _efvalToggleValue[0] = _efvalToggleValue[1] = _efvalToggleValue[2] = _efvalToggleValue[3] = _efvalToggleValue[4] = _efvalToggleValue[5] = 252;
    }
}
